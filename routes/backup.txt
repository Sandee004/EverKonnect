@auth_bp.route('/api/verify-face', methods=['POST'])
@jwt_required()
def verify_face():
    """
    Verify that the provided image contains at least one face
    ---
    tags:
      - Authentication
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          required:
            - face_image
          properties:
            face_image:
              type: string
              description: Base64-encoded face image
              example: "<Base64 string>"
    responses:
      200:
        description: Face detected successfully
        schema:
          type: object
          properties:
            message:
              type: string
              example: "1 face(s) detected"
      400:
        description: No face detected or bad image
        schema:
          type: object
          properties:
            error:
              type: string
              example: "No face detected"
    """
    user_id = get_jwt_identity()

    if not user_id:
        return jsonify({"error": "Missing credentials"})
    
    data = request.get_json()
    face_image_b64 = data.get('face_image')
    if not face_image_b64:
        return jsonify({"error": "face_image is required"}), 400

    try:
        # Decode the base64 image
        image_data = base64.b64decode(face_image_b64)
        image = Image.open(io.BytesIO(image_data)).convert('RGB')
        image_np = np.array(image)

        # Load OpenCV's built-in face detector
        face_cascade = cv2.CascadeClassifier(
            cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
        )
        gray = cv2.cvtColor(image_np, cv2.COLOR_RGB2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

        if len(faces) == 0:
            return jsonify({"error": "No face detected"}), 400
        else:
            return jsonify({"message": f"{len(faces)} face(s) detected"}), 200

    except Exception as e:
        return jsonify({"error": f"Failed to process image: {str(e)}"}), 400
