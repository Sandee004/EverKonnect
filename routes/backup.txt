"""
@auth_bp.route('/api/upload-profile-pic', methods=['POST'])
@jwt_required()
def upload_profile_pic():
    ""
    Upload user profile picture
    ---
    tags:
      - User
    security:
      - Bearer: []
    consumes:
      - multipart/form-data
    parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: JWT token as Bearer <your_token>
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6..."
      - name: face_image
        in: formData
        type: file
        required: true
        description: Profile image file to upload
    responses:
      200:
        description: Profile picture uploaded successfully
        schema:
          type: object
          properties:
            message:
              type: string
              example: "Profile picture uploaded successfully"
            image_url:
              type: string
              example: "https://res.cloudinary.com/your-cloud/image/upload/v1234/profile.jpg"
      400:
        description: Missing image file
        schema:
          type: object
          properties:
            error:
              type: string
              example: "No image file provided"
      404:
        description: User not found
        schema:
          type: object
          properties:
            error:
              type: string
              example: "User not found"
      500:
        description: Upload failed
        schema:
          type: object
          properties:
            error:
              type: string
              example: "Upload failed: something went wrong"
    ""
    user_id = get_jwt_identity()

    if 'face_image' not in request.files:
        return jsonify({"error": "No image file provided"}), 400

    image_file = request.files['face_image']

    try:
        upload_result = cloudinary.uploader.upload(image_file)
        image_url = upload_result.get("secure_url")

        user = User.query.get(user_id)
        if not user:
            return jsonify({"error": "User not found"}), 404

        user.profile_pic = image_url
        db.session.commit()

        return jsonify({
            "message": "Profile picture uploaded successfully",
            "image_url": image_url
        }), 200

    except Exception as e:
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500
"""
