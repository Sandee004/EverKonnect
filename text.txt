@business_bp.route('/messages', methods=['POST'])
def send_message():
    sender_id = request.json.get('sender_id')
    receiver_id = request.json.get('receiver_id')
    content = request.json.get('content')

    # Validate sender and receiver
    sender = User.query.get(sender_id)
    receiver = User.query.get(receiver_id)
    if not sender or not receiver:
        return jsonify({"error": "User not found"}), 404

    # Optional: Check if they have an accepted connection before messaging
    connection = Connection.query.filter(
        ((Connection.sender_id == sender_id) & (Connection.receiver_id == receiver_id)) |
        ((Connection.sender_id == receiver_id) & (Connection.receiver_id == sender_id)),
        Connection.status == 'accepted'
    ).first()
    if not connection:
        return jsonify({"error": "Users must be connected to message"}), 403

    message = Message(sender_id=sender_id, receiver_id=receiver_id, content=content)
    db.session.add(message)
    db.session.commit()
    return jsonify({"message": "Message sent"}), 201


@business_bp.route('/messages/conversation/<int:user_id>/<int:other_user_id>', methods=['GET'])
def get_conversation(user_id, other_user_id):
    messages = Message.query.filter(
        ((Message.sender_id == user_id) & (Message.receiver_id == other_user_id)) |
        ((Message.sender_id == other_user_id) & (Message.receiver_id == user_id))
    ).order_by(Message.timestamp.asc()).all()

    result = [
        {
            "id": msg.id,
            "sender_id": msg.sender_id,
            "receiver_id": msg.receiver_id,
            "content": msg.content,
            "timestamp": msg.timestamp.isoformat(),
        }
        for msg in messages
    ]
    return jsonify(result), 200
